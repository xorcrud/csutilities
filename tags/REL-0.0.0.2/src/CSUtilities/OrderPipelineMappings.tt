<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core.dll" #> 
<#@ assembly name="System.Xml.dll" #> 
<#@ assembly name="System.Xml.Linq.dll" #> 
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".generated.cs" #>
//////////////////////////////////////////////////////////////////////
//
// Summary:		Represents a T4 text template used for generating strongly-typed
//				classes for dictionary keys represented in the OrderPipelineMappings.xml 
//				file for the Commerce Server 2007 Order Object System.
//
// Usage:		Copy the OrderPipelineMappings.tt file to the class library/project
//				in which you want to be able to expose the Commerce Server properties.
//		
//				Configuration of class visibility, class name, namespace 
//				and more are done in the last section of this file.
//
// Issues:		Changes you make in the OrderPipelineMappings.xml file are not automatically
//				reflected in the generated code. 
//				But you can just open this file and save it again to run the tool.
//
//				Customization tip:
//				Free edition of T4 editor tool from tangible-engineering
//				can be used to get syntax highlighting in Visual Studio.
//
///////////////////////////////////////////////////////////////////////
//
// February/2011 by
// Brian Holmgård Kristensen 
// (author of CSUtilities)
// blog.brianh.dk / CommerceServerTraining.com
//
// All information, source code, and especially tools are 
// provided as is and on a "use at your own risk" basis.
//
///////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace <#= GetNamespace() #>
{
    <#= CreateClassAsPublic ? "public" : "internal" #> partial class <#= EntryClassName #>
    {
<#
var xDoc = XDocument.Load(OrderPipelineMappingsFile);

foreach (var classEntity in GetClasses(xDoc))
{
#>
		#region <#= classEntity.Key #>

		public partial class <#= classEntity.Key #>
		{
<#
    foreach (var property in GetPropertiesAndCollections(classEntity.Value))
    {
		if (GenerateFieldsAsConstants)
		{
#>
			public const string <#= property.Key #> = "<#= property.Value #>";
<#
		}
		else
		{
#>
			public static readonly string <#= property.Key #> = "<#= property.Value #>";
<#
		}
	}
#>
		}

		#endregion

<#
}
#>	
	}
}	

<#+
string GetNamespace()
{
	if (String.IsNullOrEmpty(Namespace))
		return GuessNamespace();

	return Namespace;
}

string GuessNamespace()
{
	throw new NotImplementedException("Feature not implemented.");
}

static IEnumerable<KeyValuePair<string, XElement>> GetClasses(XDocument document)
{
    var classes = document.Root.Elements("Class");

    if (classes != null)
    {
        foreach (var classEntity in classes)
        {
            var nameAttribute = classEntity.Attribute("Name");

            if (nameAttribute != null)
                yield return new KeyValuePair<string, XElement>(nameAttribute.Value, classEntity);
        }
    }
}

static IEnumerable<KeyValuePair<string, string>> GetPropertiesAndCollections(XElement entity)
{
    var propertiesAndCollections = 
		(entity.Elements("Property") ?? Enumerable.Empty<XElement>())
			.Union(entity.Elements("Collection") ?? Enumerable.Empty<XElement>());

    foreach (var property in propertiesAndCollections)
    {
		var name = property.Attribute("Name");
        var dictionaryKey = property.Attribute("DictionaryKey");

        yield return new KeyValuePair<string, string>(name.Value, dictionaryKey.Value);
    }
}

/***** CONFIGURATION START ******/

string OrderPipelineMappingsFile
{
	// Relative path from this file to the OrderPipelineMappings.xml file - usually located in the web-site project.
	get { return Host.ResolvePath(@"..\Website\OrderPipelineMappings.xml"); }
}

static string Namespace 
{ 
	// Namespace you want the generated class to reside in.
	get { return "CSUtilities"; } 
}

static string EntryClassName
{
	// Name of generated class.
	get { return "OrderPipelineMappings"; }
}

static bool GenerateFieldsAsConstants
{
	// Decides whether to generate fields as constants or static readonly fields
	// Only constants can be used for e.g. Attribute-parameters
	// Pros/cons: http://devlicio.us/blogs/joe_niland/archive/2006/09/27/C_2300_-static-readonly-vs-constant-variables_3A00_-when-to-use-each.aspx
	get { return false; }
}

static bool CreateClassAsPublic
{
	// Decides whether to mark the visibility of the class to public otherwise internal will be used.
	get { return true; }
}

/***** CONFIGURATION END ******/
#>